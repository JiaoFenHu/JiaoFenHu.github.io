<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020最新PhpStorm激活码</title>
    <url>/posts/phpstorm/6608d634.html</url>
    <content><![CDATA[<p>最新激活码有效期至2021年1月4号（亲测可用）<br>特别感谢：<a href="http://www.juzi89.com/" target="_blank" rel="noopener">桔子的桔子</a><br>原文连接：<a href="http://www.juzi89.com/?p=274" target="_blank" rel="noopener">2020年PHPstorm 最新激活码</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QYYBAC9D3J-eyJsaWNlbnNlSWQiOiJRWVlCQUM5RDNKIiwibGljZW5zZWVOYW1lIjoi6LaF57qnIOeoi+W6j+WRmCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMC0wMS0wNCIsInBhaWRVcFRvIjoiMjAyMS0wMS0wMyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMC0wMS0wNCIsInBhaWRVcFRvIjoiMjAyMS0wMS0wMyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjAyMC0wMS0wNCIsInBhaWRVcFRvIjoiMjAyMS0wMS0wMyJ9XSwiaGFzaCI6IjE2MDgwOTA5LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-I7c5mu4hUCMxcldrwZEJMaT+qkrzrF1bjJi0i5QHcrRxk2LO0jqzUe2fBOUR4L+x+7n6kCwAoBBODm9wXst8dWLXdq179EtjU3rfJENr1wXGgtef//FNow+Id5iRufJ4W+p+3s5959GSFibl35YtbELELuCUH2IbCRly0PUBjitgA0r2y+9jV5YD/dmrd/p4C87MccC74NxtQfRdeUEGx87vnhsqTFH/sP4C2VljSo/F/Ft9JqsSlGfwSKjzU8BreYt1QleosdMnMK7a+fkfxh7n5zg4DskdVlNbfe6jvYgMVE16DMXd6F1Zhwq+lrmewJA2jPToc+H5304rcJfa9w==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>phpstorm</category>
      </categories>
      <tags>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP使用ffmpeg实现截取视频封面图</title>
    <url>/posts/ffmpeg/4ef34b77.html</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/12/15/5c1478a7661db.png" alt="QQ图片20181215112806.png"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇文章将带您学习如何使用 <code>ffmpeg</code> 实现截取视频封面图保存到本地，以及在 <code>Linux</code> 安装<code>ffmpeg</code> 的过程。</p>
<a id="more"></a>
<h3 id="ffmpeg-介绍"><a href="#ffmpeg-介绍" class="headerlink" title="ffmpeg 介绍"></a>ffmpeg 介绍</h3><p><code>ffmpeg</code> 是一个很强大的音视频处理工具，<a href="http://ffmpeg.org/" target="_blank" rel="noopener">官网</a> 介绍<code>ffmpeg</code>是：一个完整的、跨平台的解决方案，可以记录、转换和传输音频和视频。<code>ffmpeg</code> 既可以播放视频，也提供命令行工具来处理视频，另外还有强大的视频处理库用于开发。</p>
<h3 id="Linux-安装-ffmpeg"><a href="#Linux-安装-ffmpeg" class="headerlink" title="Linux 安装 ffmpeg"></a>Linux 安装 ffmpeg</h3><h4 id="下载安装-ffmpeg"><a href="#下载安装-ffmpeg" class="headerlink" title="下载安装 ffmpeg"></a>下载安装 ffmpeg</h4><p>去 <a href="http://www.ffmpeg.org/" target="_blank" rel="noopener">ffmpeg 官网</a> 下载<code>4.0.3</code> 安装包。 下载之后上传至<code>Linux</code>准备安装，首先解压安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xjvf ffmpeg-3.3.1.tar.bz2</span><br><span class="line">cd ffmpeg-3.3.1/</span><br><span class="line">./configure --enable-shared --prefix=/monchickey/ffmpeg</span><br></pre></td></tr></table></figure>
<div class="note warning"><p>注意：<br>如果现在直接执行<code>configure</code>配置的话，可能会报如下的错误：<br><code style="color:#c33e3f;">yasm/nasm not found or too old. Use –disable-yasm for a crippled build.</code><br>错误的意思是 <code>yasm/nasm</code> 包不存在或者很旧，可以使用<code>--disable-yasm</code>禁用这个选项编译也可以按照下面的步骤进行安装<code>yasm</code>。</p></div>
<h4 id="下载安装-yasm"><a href="#下载安装-yasm" class="headerlink" title="下载安装 yasm"></a>下载安装 yasm</h4><ul>
<li><code>yasm</code>是一款汇编器，并且是完全重写了<code>nasm</code>的汇编环境，接收<code>nasm</code>和<code>gas</code>语法，支持<code>x86</code>和<code>amd64</code>指令集。</li>
<li>安装<code>yasm</code>：<a href="http://yasm.tortall.net/Download.html" target="_blank" rel="noopener">yasm 安装地址</a></li>
<li>下载完成后传到服务器上进行安装，下面是安装方法（这里我安装的是 <code>1.3.0</code>）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvzf yasm-1.3.0.tar.gz</span><br><span class="line">cd yasm-1.3.0/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<ul>
<li>编译参数都是默认的，直接安装到系统中即可。</li>
</ul>
<h4 id="继续安装-ffmpeg"><a href="#继续安装-ffmpeg" class="headerlink" title="继续安装 ffmpeg"></a>继续安装 ffmpeg</h4><p><code>yasm</code>安装成功之后继续回到<code>ffmpeg</code>解压后的目录，执行下面命令编译并安装：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --enable-shared --prefix=/monchickey/ffmpeg</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p>
<p>这个编译的过程时间可能有点长，这时候我们可以去泡杯咖啡了。</p>
<p>安装完成之后进入到安装目录：<code>cd /monchickey/ffmpeg/</code>.<br><div class="note default"><p>├─ ffmpeg<br>├─── bin        // ffmpeg主程序二进制目录<br>├─── include        // C/C++头文件目录<br>├─── lib        // 编译好的库文件目录<br>├─── share        // 文档目录</p></div><br>进入<code>bin</code>目录，执行 <code>./ffmpeg -version</code> 查看当前版本的详细信息</p>
<p>默认情况下一般会报：<code style="color:#c33e3f;">libavdevice.so.57: cannot open shared object file: No such file or directory</code></p>
<p>原因是<code>lib</code>目录未加载到链接到系统库中，系统<code>ld</code>目录列表在<code>/etc/ld.so.conf</code>中，打开文件会发现，里面引用了<code>/etc/ld.so.conf.d/</code>下面所有的<code>.conf</code>文。</p>
<p>这时我们只需要创建一个文件并写入<code>lib</code>路径即可，执行命令：<code>vim /etc/ld.so.conf.d/ffmpeg.conf</code> 然后添加一行内容：<code>/monchickey/ffmpeg/lib</code> 之后保存并退出，然后执行 <code>ldconfig</code> 使配置生效，现在再次执行 <code>./ffmpeg -version</code> 显示就正常了<br><div class="note success"><p>提示：可以根据需要将bin目录添加至环境变量中以保证任何时候都能使用<code>ffmpeg</code>命令</p></div></p>
<h3 id="使用php代码实现视频封面图截取"><a href="#使用php代码实现视频封面图截取" class="headerlink" title="使用php代码实现视频封面图截取"></a>使用php代码实现视频封面图截取</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传视频</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 视频路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_video</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        $api-&gt;dataerror(<span class="string">'视频上传错误!'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">        $type = [</span><br><span class="line">            <span class="string">"video/rmvb"</span>,</span><br><span class="line">            <span class="string">"video/wmv"</span>,</span><br><span class="line">            <span class="string">"video/3gp"</span>,</span><br><span class="line">            <span class="string">"video/mkv"</span>,</span><br><span class="line">            <span class="string">"video/mp4"</span>,</span><br><span class="line">            <span class="string">"video/mpg"</span>,</span><br><span class="line">            <span class="string">"video/avi"</span>,</span><br><span class="line">            <span class="string">"video/quicktime"</span>,</span><br><span class="line">            <span class="string">"multipart/video"</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">if</span> (in_array($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>], $type)) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt;= <span class="number">20</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">                $upload_path = <span class="string">'uploads/video/file_name'</span>;	 <span class="comment">//建立文件夹</span></span><br><span class="line">                create($upload_path);</span><br><span class="line">                $file_name        = md5(uniqid(rand()));    <span class="comment">// 文件随机名字</span></span><br><span class="line">                $file_ext         = strtolower(substr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>], strrpos($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>], <span class="string">"."</span>) + <span class="number">1</span>, strlen($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>])));    <span class="comment">// 获取文件后缀</span></span><br><span class="line"></span><br><span class="line">                $upload_path_file = $upload_path . $file_name . <span class="string">'.'</span> . $file_ext;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (file_exists($upload_path_file)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">'视频文件名以被占用, 请重新上传!'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], $upload_path_file)) &#123;</span><br><span class="line"></span><br><span class="line">                        $video_path = $upload_path_file;	<span class="comment">// 视频路径</span></span><br><span class="line">                        $item[<span class="string">'video_path'</span>] = $video_path;</span><br><span class="line"></span><br><span class="line">                        $face_name = $upload_path . $file_name . <span class="string">'.'</span> . <span class="string">'png'</span>; <span class="comment">//视频封面图</span></span><br><span class="line">                        $pic_size = getVideoInfo($video_path);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> ($pic_size[<span class="string">'2'</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                             $str = <span class="string">"/monchickey/ffmpeg/bin/ffmpeg -i "</span> . $video_path . <span class="string">" -y -f mjpeg -ss 1 -t 0.001 -s "</span> . $pic_size[<span class="number">1</span>] . <span class="string">"x"</span> . $pic_size[<span class="number">0</span>] . <span class="string">" "</span> . $face_name;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                             $str = <span class="string">"/monchickey/ffmpeg/bin/ffmpeg -i "</span> . $video_path . <span class="string">" -y -f mjpeg -ss 1 -t 0.001 -s "</span> . $pic_size[<span class="number">0</span>] . <span class="string">"x"</span> . $pic_size[<span class="number">1</span>] . <span class="string">" "</span> . $face_name;</span><br><span class="line">                        &#125;</span><br><span class="line">                        system($str);</span><br><span class="line">                        <span class="keyword">if</span> (file_exists($face_name)) &#123;</span><br><span class="line">                            $item[<span class="string">'video_face_image'</span>] = $name;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">"视频封面图截取失败!"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> $item;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    	<span class="keyword">echo</span> <span class="string">"视频文件上传失败!"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"视频最大不能超过20M!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	<span class="keyword">echo</span> <span class="string">"视频格式错误!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建文件夹</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $dir 文件夹路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($dir)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !is_dir($dir) )&#123;</span><br><span class="line">        $temp = explode(<span class="string">'/'</span>,$dir);</span><br><span class="line">        $cur_dir = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($temp); $i++)&#123;</span><br><span class="line">            $cur_dir .= $temp[$i].<span class="string">'/'</span>;</span><br><span class="line">            <span class="keyword">if</span>(!is_dir($cur_dir))&#123;</span><br><span class="line">                @mkdir($cur_dir,<span class="number">0777</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理视频文件文件截取封面图的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $file 视频文件路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVideoInfo</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $command = sprintf(<span class="string">'/monchickey/ffmpeg/bin/ffmpeg -i "%s" 2&gt;&amp;1'</span>, $file);</span><br><span class="line"></span><br><span class="line">    ob_start();</span><br><span class="line"></span><br><span class="line">    passthru($command);</span><br><span class="line"></span><br><span class="line">    $info = ob_get_contents();</span><br><span class="line">    ob_end_clean();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/Video: (.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?)[,\s]/"</span>, $info, $match)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($match <span class="keyword">as</span> $k =&gt; $m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strstr($m, <span class="string">'x'</span>) &amp;&amp; $k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                $size1 = explode(<span class="string">'x'</span>, trim($m));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">"/^\d*$/"</span>, $size1[<span class="number">0</span>])) &#123;</span><br><span class="line">                    $size[<span class="number">0</span>] = $size1[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">if</span> (preg_match(<span class="string">"/^\d*$/"</span>, $size1[<span class="number">1</span>])) &#123;</span><br><span class="line">                        $size[<span class="number">1</span>] = $size1[<span class="number">1</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $size2 = explode(<span class="string">' '</span>, trim($size1[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">                        $size[<span class="number">1</span>] = $size2[<span class="number">0</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/Side data:[,\s]/"</span>, $info, $match2)) &#123;</span><br><span class="line">        $size[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.cnblogs.com/freeweb/p/6897907.html" target="_blank" rel="noopener">博客园 - 自由的web</a></li>
</ul>
]]></content>
      <categories>
        <category>ffmpeg</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT 学习笔记</title>
    <url>/posts/php/d9c65851.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&emsp;&emsp;<a href="https://jwt.io/" target="_blank" rel="noopener">JWT</a> 是什么？JWT是json web token缩写。它将用户信息加密到token里，服务器不保存任何用户信息。服务器通过使用保存的密钥验证token的正确性，只要正确即通过验证。基于token的身份验证可以替代传统的cookie+session身份验证方法。<br><div class="note primary"><p>使用流程：</p><ol><li>初次登录：用户初次登录，输入用户名密码；</li><li>密码验证：服务器从数据库取出用户名和密码进行验证；</li><li>生成JWT：服务器端验证通过，根据从数据库返回的信息，以及预设规则，生成JWT；</li><li>返还JWT：服务器的HTTP RESPONSE中将JWT返还；</li><li>带JWT的请求：以后客户端发起请求，HTTP REQUEST；</li><li>HEADER中的Authorizatio字段都要有值，为JWT；</li><li>服务器验证JWT；</li></ol></div></p>
<a id="more"></a>
<h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>JWT由三个部分组成：<code>header.payload.signature</code></p>
<h4 id="header"><a href="#header" class="headerlink" title="header"></a>header</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><p>说明：该字段为json格式。</p><ul><li>alg：字段指定了生成signature的算法，默认值为：<code>HS256</code>，</li><li>typ：默认值为：<code>JWT</code></li></ul></div>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"iat"</span>: <span class="number">1516239022</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><p>说明：该字段为json格式，表明用户身份的数据，可以自己自定义字段，很灵活。</p><ul><li>sub：面向的用户</li><li>iat：签发时间</li><li>iss：该JWT的签发者</li><li>exp：过期时间</li><li>nbf：该时间之前不接收处理该Token</li><li>jti：该Token唯一标识</li><li>name：（自定义字段）姓名</li></ul></div>
<h4 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<div class="note success"><p>说明：将前两部分进行base64编码后使用<code>.</code>拼接成待加密字符串，<code>secret</code>是加密的密钥；<br>加密方式需要在 <strong>header</strong> 指定，有好多种：<code>HS256</code>，<code>HS384</code>，<code>RS256</code> 等。</p></div>
<h3 id="实践代码"><a href="#实践代码" class="headerlink" title="实践代码"></a>实践代码</h3><div class="note warning"><p>注意：php版本 <code>&gt;= 7.0.*</code></p></div>
<p>类封装：jwt.class.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PHP实现jwt</span></span><br><span class="line"><span class="comment"> * 作者：https://segmentfault.com/a/1190000016251365</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jwt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $header=<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'alg'</span>=&gt;<span class="string">'HS256'</span>, <span class="comment">//生成signature的算法</span></span><br><span class="line">        <span class="string">'typ'</span>=&gt;<span class="string">'JWT'</span>    <span class="comment">//类型</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用HMAC生成信息摘要时所使用的密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $key=<span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取jwt token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $payload jwt载荷   格式如下非必须</span></span><br><span class="line"><span class="comment">     * [</span></span><br><span class="line"><span class="comment">     *  'iss'=&gt;'jwt_admin',  //该JWT的签发者</span></span><br><span class="line"><span class="comment">     *  'iat'=&gt;time(),  //签发时间</span></span><br><span class="line"><span class="comment">     *  'exp'=&gt;time()+7200,  //过期时间</span></span><br><span class="line"><span class="comment">     *  'nbf'=&gt;time()+60,  //该时间之前不接收处理该Token</span></span><br><span class="line"><span class="comment">     *  'sub'=&gt;'www.admin.com',  //面向的用户</span></span><br><span class="line"><span class="comment">     *  'jti'=&gt;md5(uniqid('JWT').time())  //该Token唯一标识</span></span><br><span class="line"><span class="comment">     * ]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span><span class="params">(array $payload)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array($payload))</span><br><span class="line">        &#123;</span><br><span class="line">            $base64header=<span class="keyword">self</span>::base64UrlEncode(json_encode(<span class="keyword">self</span>::$header,JSON_UNESCAPED_UNICODE));</span><br><span class="line">            $base64payload=<span class="keyword">self</span>::base64UrlEncode(json_encode($payload,JSON_UNESCAPED_UNICODE));</span><br><span class="line">            $token=$base64header.<span class="string">'.'</span>.$base64payload.<span class="string">'.'</span>.<span class="keyword">self</span>::signature($base64header.<span class="string">'.'</span>.$base64payload,<span class="keyword">self</span>::$key,<span class="keyword">self</span>::$header[<span class="string">'alg'</span>]);</span><br><span class="line">            <span class="keyword">return</span> $token;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token是否有效,默认验证exp,nbf,iat时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $Token 需要验证的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyToken</span><span class="params">(string $Token)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $tokens = explode(<span class="string">'.'</span>, $Token);</span><br><span class="line">        <span class="keyword">if</span> (count($tokens) != <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">list</span>($base64header, $base64payload, $sign) = $tokens;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取jwt算法</span></span><br><span class="line">        $base64decodeheader = json_decode(<span class="keyword">self</span>::base64UrlDecode($base64header), JSON_OBJECT_AS_ARRAY);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($base64decodeheader[<span class="string">'alg'</span>]))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//签名验证</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>::signature($base64header . <span class="string">'.'</span> . $base64payload, <span class="keyword">self</span>::$key, $base64decodeheader[<span class="string">'alg'</span>]) !== $sign)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        $payload = json_decode(<span class="keyword">self</span>::base64UrlDecode($base64payload), JSON_OBJECT_AS_ARRAY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//签发时间大于当前服务器时间验证失败</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($payload[<span class="string">'iat'</span>]) &amp;&amp; $payload[<span class="string">'iat'</span>] &gt; time())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过期时间小宇当前服务器时间验证失败</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($payload[<span class="string">'exp'</span>]) &amp;&amp; $payload[<span class="string">'exp'</span>] &lt; time())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//该nbf时间之前不接收处理该Token</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($payload[<span class="string">'nbf'</span>]) &amp;&amp; $payload[<span class="string">'nbf'</span>] &gt; time())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base64UrlEncode   https://jwt.io/  中base64UrlEncode编码实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $input 需要编码的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">base64UrlEncode</span><span class="params">(string $input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_replace(<span class="string">'='</span>, <span class="string">''</span>, strtr(base64_encode($input), <span class="string">'+/'</span>, <span class="string">'-_'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base64UrlEncode  https://jwt.io/  中base64UrlEncode解码实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $input 需要解码的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">base64UrlDecode</span><span class="params">(string $input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $remainder = strlen($input) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> ($remainder) &#123;</span><br><span class="line">            $addlen = <span class="number">4</span> - $remainder;</span><br><span class="line">            $input .= str_repeat(<span class="string">'='</span>, $addlen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> base64_decode(strtr($input, <span class="string">'-_'</span>, <span class="string">'+/'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HMACSHA256签名   https://jwt.io/  中HMACSHA256签名实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $input 为base64UrlEncode(header).".".base64UrlEncode(payload)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $alg   算法方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">signature</span><span class="params">(string $input, string $key, string $alg = <span class="string">'HS256'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $alg_config=<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'HS256'</span>=&gt;<span class="string">'sha256'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::base64UrlEncode(hash_hmac($alg_config[$alg], $input, $key,<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PHP实现jwt</span></span><br><span class="line"><span class="comment"> * 作者：https://segmentfault.com/a/1190000016251365</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"jwt.class.php"</span>;</span><br><span class="line"></span><br><span class="line">$payload_test=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'iss'</span> =&gt; <span class="string">'admin'</span>,</span><br><span class="line">    <span class="string">'iat'</span> =&gt; time(),</span><br><span class="line">    <span class="string">'exp'</span> =&gt; time()+<span class="number">7200</span>,</span><br><span class="line">    <span class="string">'nbf'</span> =&gt; time(),</span><br><span class="line">    <span class="string">'sub'</span> =&gt; <span class="string">'www.admin.com'</span>,</span><br><span class="line">    <span class="string">'jti'</span> =&gt; md5(uniqid(<span class="string">'JWT'</span>).time())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$token_test = Jwt::getToken($payload_test);</span><br><span class="line"><span class="keyword">echo</span> $token_test;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证token签名</span></span><br><span class="line">$getPayload_test=Jwt::verifyToken($token_test);</span><br><span class="line">var_dump($getPayload_test);</span><br></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://segmentfault.com/a/1190000016251365" target="_blank" rel="noopener">php 后端实现JWT认证方法</a></li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习之路</title>
    <url>/posts/git/113d1d94.html</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/12/19/5c199a139b398.png" alt="QQ图片20181219090659.png"></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Git是一个免费的开源 分布式版本控制系统，旨在快速，高效地处理从小型到大型项目的所有事务。<br>Git 易于学习， 占地面积小，具有闪电般快速的性能。它超越了Subversion，CVS，Perforce和ClearCase等SCM工具，具有廉价的本地分支，便捷的临时区域和 多个工作流程等功能。</p>
<a id="more"></a>
<h3 id="Download-下载"><a href="#Download-下载" class="headerlink" title="Download 下载"></a>Download 下载</h3><p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网git download</a></p>
<p>官方文档：<a href="https://www.git-scm.com/book/zh/v2" target="_blank" rel="noopener">Documentation</a></p>
<div class="note success"><p>提示：具体的安装方法去看一下 <a href="https://www.git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">官方文档</a> ，里面写的安装步骤很详细。</p></div>
<h3 id="命令行使用-GIT"><a href="#命令行使用-GIT" class="headerlink" title="命令行使用 GIT"></a>命令行使用 GIT</h3><h4 id="直接在已有项目的文件里提交项目"><a href="#直接在已有项目的文件里提交项目" class="headerlink" title="直接在已有项目的文件里提交项目"></a>直接在已有项目的文件里提交项目</h4><p>进入到项目文件夹下，打开 <code>cmd</code> 命令行</p>
<div class="note success"><p>提示：这里推荐大家使用 <code>cmder</code> 命令行工具，个人感觉在敲命令的时候很舒服。</p></div>
<ol>
<li>初始化</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>这个时候你会在你的项目文件夹下面看到一个 <code>.git</code> 的隐藏文件</p>
<div class="note warning"><p>提示：看不到说明你没勾选文件夹 <code>隐藏的项目</code> 。 点击文件夹上面的 <code>查看 -&gt; 隐藏的项目</code>（勾选上）</p></div>
<ol start="2">
<li>和远程建立连接</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add &lt;dev&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>dev</code> ：远程仓库的名字（别名，随便起）</li>
<li><code>url</code> ：远程仓库的地址（https ， ssh 都行）</li>
</ul>
<ol start="3">
<li>获取远程分支</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch &lt;dev&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>dev</code> ：上一步仓库的别名</li>
</ul>
<ol start="4">
<li>查看远程分支</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>将远程的分支检出到本地并切换到新的分支</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;thisBranch&gt; &lt;dev&gt;/&lt;branchName&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-b</code> ：新建一个分支并同时切换到那个分支上</li>
<li><code>thisBranch</code> ：本地分支的名称</li>
<li><code>dev</code> ：远程仓库别名</li>
<li><code>branchName</code> ：远程分支名称</li>
</ul>
<div class="note warning"><p>提示：这一步建议 <code>thisBranch</code> 和 <code>branchName</code> 保持一致</p><p>注意：如果出现 <code style="color:#c33e3f;">fatal: ‘thisBranch’ is not a commit and a branch ‘thisBranch’ cannot be created from it</code> 错误，说明远程分支不存在，仔细检测一下 <code>&lt;dev&gt;/&lt;branchName&gt;</code>。</p></div>
<ol start="6">
<li>这个时候我们可以使用 <code>git status</code> 查看当前仓库那些文件没有被跟踪和变化。</li>
<li>添加未跟踪的文件为跟踪状态</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<ul>
<li><code>.</code> ：当前仓库所有未跟踪的文件</li>
</ul>
<ol start="8">
<li>提交</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m "commit content"</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-m</code> ： 本次提交的内容</li>
</ul>
<div class="note success"><p>这里 7，8 可以合并成一句执行，但是这里只能提交未跟踪的文件，已跟踪的文件修改后将不会被提交<br><code>git commit -a -m &quot;commit content&quot;</code></p></div>
<ol start="9">
<li>推送到远程仓库</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>这个时候我们在浏览器上打开远程仓库可以看到刚刚提交的内容了。</p>
<h4 id="通过远程拉取代码时，这里使用的是-clone-的方式"><a href="#通过远程拉取代码时，这里使用的是-clone-的方式" class="headerlink" title="通过远程拉取代码时，这里使用的是 clone 的方式"></a>通过远程拉取代码时，这里使用的是 <code>clone</code> 的方式</h4><ol>
<li>新建一个干净的文件夹并且进入到该文件夹，执行下面的命令</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone &lt;url&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>url</code> ： 远程项目仓库的地址</li>
</ul>
<ol start="2">
<li>查看远程仓库的分支</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>拉取远程分支到本地并自动切换到该分支</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;thisBranch&gt; &lt;dev&gt;/&lt;branchName&gt;</span><br></pre></td></tr></table></figure>
<p>这里我就不多做解释了，在文章的上面都有想对应的说明。</p>
<ol start="4">
<li>下面就可以开始你的项目开发了。</li>
</ol>
<div class="note warning"><p>注意：提交后别忘记 <code>push</code> ，否则无法把最新的代码推送到远程仓库里去</p></div>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93" target="_blank" rel="noopener">git官方文档</a></li>
<li><a href="https://www.cnblogs.com/hamsterPP/p/6810831.html" target="_blank" rel="noopener">git 拉取远程指定分支 pull本地不存在的分支</a></li>
<li><a href="https://www.cnblogs.com/smiler/p/6924583.html" target="_blank" rel="noopener">git命令－切换分支</a></li>
<li><a href="https://www.cnblogs.com/Sharley/p/7944070.html" target="_blank" rel="noopener">为已经存在的本地项目添加git，以及从远程仓库拉取代码并切换远程分支</a></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstorm配置Xdebug</title>
    <url>/posts/xdebug/8d586dc9.html</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/10/18/5bc831fa81149.png" alt="xdebug.png"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信做为一名<code>PHP</code>开发的程序员对<code>sublime</code>这个编辑器不陌生吧，我之前用的就是这个编辑器，在每次有<code>BUG</code>反馈过来的时候，我都是用<code>die</code>去一步一步的断点打印输出找错误，看着是不是就很痛苦。后来知道了 <code>phpstorm + xdebug</code>，欣喜若狂，这简直是款调试代码的神器呀，幸福来的好突然。后来这篇文章就诞生了。</p>
<a id="more"></a>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>本篇文章将讲述的是如何使用 <code>xdebug</code> 配合 <code>phpstorm</code> 编辑器调试PHP程序 兼容 <code>postman</code></p>
<h3 id="什么是Xdebug"><a href="#什么是Xdebug" class="headerlink" title="什么是Xdebug?"></a>什么是Xdebug?</h3><p>Xdebug是一个开放源代码的PHP程序调试器(即一个Debug工具)，可以用来跟踪，调试和分析PHP程序的运行状况。</p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul>
<li>下载 <a href="https://www.jetbrains.com/phpstorm" target="_blank" rel="noopener">phpstorm</a></li>
</ul>
<div class="note success"><p>至于怎么去破解我想 <a href="https://www.baidu.com/" target="_blank" rel="noopener">这里</a> 可以帮助你</p></div>
<ul>
<li>下载对应版本的 <a href="https://xdebug.org/download.php" target="_blank" rel="noopener">Xdebug扩展</a></li>
</ul>
<h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><h4 id="配置编辑器的php"><a href="#配置编辑器的php" class="headerlink" title="配置编辑器的php"></a>配置编辑器的php</h4><p>打开已经破解好的 <code>phpstorm</code> 的设置，找到 <code>Languages &amp; Frameworks -&gt; PHP</code> 选择自己当前正在使用的版本。</p>
<p><img src="https://i.loli.net/2018/10/18/5bc8475b5188d.png" alt="p1.png"></p>
<h4 id="配置Servers"><a href="#配置Servers" class="headerlink" title="配置Servers"></a>配置Servers</h4><p>Name 随便填写，Host 和 Port 填写自己需要调试的项目域名以及端口，Debugger 默认的Xdebug就<br>行</p>
<p><img src="https://i.loli.net/2018/10/18/5bc85a85ac2c5.png" alt="p2.png"></p>
<p>点击 <code>Languages &amp; Frameworks -&gt; PHP -&gt; Debug</code> 将Debug port 修改为 <code>9001</code></p>
<p>点击 <code>Languages &amp; Frameworks -&gt; PHP -&gt; Debug -&gt; DBGp Proxy</code> 将<code>IDE KEY</code>换成当前PHP的<code>IDE KEY</code>填上自己网站的 <code>host</code> 和 <code>port</code></p>
<div class="note danger"><p>查看<code>IDE KEY</code>需要打印自己的PHP信息<br><code>echo phpinfo();</code><br>然后在这里面找<code>IDE KEY</code></p></div>
<h4 id="配置-php-ini"><a href="#配置-php-ini" class="headerlink" title="配置 php.ini"></a>配置 php.ini</h4><p>打开 <code>php.ini</code> 在最底部添加以下代码</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[xdebug]</span></span><br><span class="line"><span class="comment">; XDEBUG Extension DLL</span></span><br><span class="line"><span class="attr">zend_extension</span> =<span class="string">"D:/wamp64/bin/php/php5.6.31/zend_ext/php_xdebug-2.5.5-5.6-vc11-x86_64.dll"</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="attr">xdebug.idekey</span>=<span class="string">"PHPSTORM"</span></span><br><span class="line"><span class="attr">xdebug.remote_enable</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">xdebug.profiler_enable</span> = <span class="literal">off</span></span><br><span class="line"><span class="attr">xdebug.profiler_enable_trigger</span> = <span class="literal">off</span></span><br><span class="line"><span class="attr">xdebug.profiler_output_name</span> = cachegrind.out.%t.%p</span><br><span class="line"><span class="attr">xdebug.profiler_output_dir</span> =<span class="string">"D:/wamp64/tmp"</span></span><br><span class="line"><span class="attr">xdebug.show_local_vars</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">xdebug.remote_handler</span> = dbgp</span><br><span class="line"><span class="comment">; 设置xdebug的端口为9001, 要和编辑器设置的一致哦</span></span><br><span class="line"><span class="attr">xdebug.remote_port</span> = <span class="string">"9001"</span></span><br></pre></td></tr></table></figure>
<h4 id="安装chrome-xdebug-helper-扩展"><a href="#安装chrome-xdebug-helper-扩展" class="headerlink" title="安装chrome xdebug helper 扩展"></a>安装<code>chrome xdebug helper</code> 扩展</h4><p>扩展地址： <a href="https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc" target="_blank" rel="noopener">xdebug helper</a></p>
<p><img src="https://i.loli.net/2018/10/23/5bcec8d44ae8b.png" alt="p7.png"></p>
<h4 id="运行监听配置（这步配置配置的是为了编辑器里的run需要的，在postman调试可以忽略此步骤）"><a href="#运行监听配置（这步配置配置的是为了编辑器里的run需要的，在postman调试可以忽略此步骤）" class="headerlink" title="运行监听配置（这步配置配置的是为了编辑器里的run需要的，在postman调试可以忽略此步骤）"></a>运行监听配置（这步配置配置的是为了编辑器里的run需要的，在postman调试可以忽略此步骤）</h4><p>按照下图的配置完成后点击<code>OK</code></p>
<p><img src="https://i.loli.net/2018/10/23/5bcec2429afff.png" alt="p3.png"></p>
<p><img src="https://i.loli.net/2018/10/23/5bcec386ab481.png" alt="p4.png"></p>
<p>开启监听 点击上面带虫子的小话筒</p>
<p><img src="https://i.loli.net/2019/05/17/5cde57b2e6c6351542.png" alt="p5.png"></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>点击编辑器上面的小瓢虫，这时会自动弹出编辑器代码断点的地方，并打印了上面的变量</p>
<p><img src="https://i.loli.net/2018/10/23/5bcec6cc27d7b.png" alt="p6.png"></p>
<h3 id="兼容-postman"><a href="#兼容-postman" class="headerlink" title="兼容 postman"></a>兼容 <code>postman</code></h3><p>在项目中使用 <code>postman</code> 调试的时候在 <code>header</code> 添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KEY : Cookie</span><br><span class="line">VALUE : XDEBUG_SESSION=PHPSTORM</span><br></pre></td></tr></table></figure>
<p>点击 <code>Send</code> 后效果跟上面是一样的，自动弹出编辑器跳到断点的地方。</p>
]]></content>
      <categories>
        <category>xdebug</category>
      </categories>
      <tags>
        <tag>phpstorm</tag>
        <tag>Xdebug</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitMQ 安装教程</title>
    <url>/posts/rabbitmq/a3479b5d.html</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/09/J9MjhWqkgCaIS6B.png" alt="rabbitmq.png"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;中间有段时间了解过消息队列，利用它们可以做很多事情，一般都广泛应用于需要异步处理的程序上。现在成型的队列有很多，其中有<code>rabbitmq</code>，<code>beanstalkd</code>等等，他们各有千秋。今天在<code>centos 7</code>上安装<code>rabbitMQ</code>记录一下。<br><a id="more"></a></p>
<h3 id="官方安装简介"><a href="#官方安装简介" class="headerlink" title="官方安装简介"></a>官方安装简介</h3><p>&emsp;&emsp;基于<strong>RPM</strong>的<strong>Linux（RedHat Enterprise Linux，CentOS，Fedora，openSUSE）</strong> 上的<strong>RabbitMQ</strong>安装。<strong>RabbitMQ</strong>包含在标准<strong>Fedora</strong>和<strong>RHEL</strong>存储库中。但是，其中包含的版本通常是过时的，并且不再受支持。</p>
<p>有两种方法可以安装最新版本的RabbitMQ：</p>
<ul>
<li>使用<strong>Package Cloud</strong>或<strong>Bintray</strong>上的Yum存储库安装软件包（强烈建议使用此选项）</li>
<li>下载软件包并使用<code>rpm</code>安装。此选项将需要手动安装所有软件包依赖项。</li>
</ul>
<p>官方地址：<a href="https://www.rabbitmq.com/install-rpm.html#downloads" target="_blank" rel="noopener">rabbitMQ 安装教程</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="note danger"><p>注意：erlang需要和rabbitmq的版本要匹配，<a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">RabbitMQ Erlang版本要求</a></p></div>
<h4 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h4><div class="note warning"><p><code>rabbitMQ</code>是<code>erlang</code>语言开发的，所以在安装之前必须要安装<code>erlang</code>依赖</p></div>
<p>使用官方提供的脚本进行安装：<a href="https://packagecloud.io/rabbitmq/erlang/install#bash-rpm" target="_blank" rel="noopener">erlang Installation instructions</a><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p>
<ol>
<li>运行该脚本后会得到一个<code>/etc/yum.repos.d/rabbitmq_erlang.repo</code>包文件;</li>
<li>运行<code>yum install erlang</code>进行安装。中间如果有提示输入<code>y</code>等待安装完成就行了;</li>
<li>测试是否安装成功：<code>erl</code>;</li>
</ol>
<h4 id="安装rabbitMQ"><a href="#安装rabbitMQ" class="headerlink" title="安装rabbitMQ"></a>安装rabbitMQ</h4><p>跟<code>erlang</code>安装是一样的操作<br>使用官方提供的脚本进行安装：<a href="https://packagecloud.io/rabbitmq/rabbitmq-server/install#bash-rpm" target="_blank" rel="noopener">rabbitMQ Installation instructions</a><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p>
<ol>
<li>运行该脚本后会得到一个<code>/etc/yum.repos.d/rabbitmq_rabbitmq-server.repo</code>包文件;</li>
<li>运行<code>yum install rabbitmq-server</code>进行安装。中间如果有提示输入<code>y</code>等待安装完成就行了;</li>
</ol>
<h3 id="执行rabbitMQ的基本命令"><a href="#执行rabbitMQ的基本命令" class="headerlink" title="执行rabbitMQ的基本命令"></a>执行rabbitMQ的基本命令</h3><h4 id="设置守护进程，系统启动时执行"><a href="#设置守护进程，系统启动时执行" class="headerlink" title="设置守护进程，系统启动时执行"></a>设置守护进程，系统启动时执行</h4><p><code>systemctl enable rabbitmq-server</code></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><code>systemctl start rabbitmq-server</code></p>
<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><p><code>systemctl stop rabbitmq-server</code></p>
<h4 id="安装管理界面rabbitmq-management"><a href="#安装管理界面rabbitmq-management" class="headerlink" title="安装管理界面rabbitmq_management"></a>安装管理界面rabbitmq_management</h4><p><code>rabbitmq-plugins enable rabbitmq_management</code></p>
<h4 id="重启rabbitmq"><a href="#重启rabbitmq" class="headerlink" title="重启rabbitmq"></a>重启rabbitmq</h4><p><code>/sbin/service rabbitmq-server restart</code></p>
<h4 id="查看http服务开启"><a href="#查看http服务开启" class="headerlink" title="查看http服务开启"></a>查看http服务开启</h4><p><code>rabbitmqctl status</code></p>
<h4 id="查看已经存在的用户"><a href="#查看已经存在的用户" class="headerlink" title="查看已经存在的用户"></a>查看已经存在的用户</h4><p><code>rabbitmqctl list_users</code></p>
<h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><p><code>rabbitmqctl add_user admin admin</code></p>
<h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><p><code>rabbitmqctl set_user_tags admin administrator</code></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.rabbitmq.com/install-rpm.html#downloads" target="_blank" rel="noopener">Installing on RPM-based Linux (RedHat Enterprise Linux, CentOS, Fedora, openSUSE)</a></li>
<li><a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">RabbitMQ Erlang版本要求</a></li>
<li><a href="https://packagecloud.io/rabbitmq/rabbitmq-server/install#bash-rpm" target="_blank" rel="noopener">RabbitMA Installation instructions</a></li>
<li><a href="https://packagecloud.io/rabbitmq/erlang/install#bash-rpm" target="_blank" rel="noopener">Erlang Installation instructions</a></li>
<li><a href="https://my.oschina.net/u/1262235/blog/3036909" target="_blank" rel="noopener">RabbitMQ安装和卸载</a></li>
<li><a href="https://blog.51cto.com/mpflinux/2451450" target="_blank" rel="noopener">CentOS7安装RabbitMQ3.7</a></li>
</ul>
]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitMQ使用期间可能会遇到的问题 - CentOS 7</title>
    <url>/posts/rabbitmq/79100238.html</url>
    <content><![CDATA[<h3 id="NOT-ALLOWED-access-to-vhost-‘-‘-refused-for-user-‘harlan’"><a href="#NOT-ALLOWED-access-to-vhost-‘-‘-refused-for-user-‘harlan’" class="headerlink" title="NOT_ALLOWED - access to vhost ‘/‘ refused for user ‘harlan’"></a>NOT_ALLOWED - access to vhost ‘/‘ refused for user ‘harlan’</h3><div class="note danger"><p>原因是因为<code>harlan</code>用户没有访问 ‘/‘ 的权限。</p></div>
<div class="note success"><p>使用下面命令修改权限：<br><code>rabbitmqctl set_permissions -p / harlan &#39;.*&#39; &#39;.*&#39; &#39;.*&#39;</code></p></div>
<h3 id="inequivalent-arg-‘durable’-for-queue-‘hello’-in-vhost-‘-‘-received-‘true’-but-current-is-‘false’"><a href="#inequivalent-arg-‘durable’-for-queue-‘hello’-in-vhost-‘-‘-received-‘true’-but-current-is-‘false’" class="headerlink" title="inequivalent arg ‘durable’ for queue ‘hello’ in vhost ‘/‘: received ‘true’ but current is ‘false’"></a>inequivalent arg ‘durable’ for queue ‘hello’ in vhost ‘/‘: received ‘true’ but current is ‘false’</h3><div class="note danger"><p>原因是因为<code>hello</code>这个队列已经被你定义成非持久化的队列。</p></div>
<a id="more"></a>
<div class="note success"><p><del><code>$channel-&gt;queue_declare(&#39;hello&#39;, false, true, false, false);</code></del><br>你现在如果需要一个持久化的队列，则需要从新定义。<br>将hello替换一下名字就好了。<br><code>$channel-&gt;queue_declare(&#39;harlan&#39;, false, true, false, false);</code></p></div>
<h3 id="no-exchange-‘supply-exchange’-in-vhost-‘-‘"><a href="#no-exchange-‘supply-exchange’-in-vhost-‘-‘" class="headerlink" title="no exchange ‘supply_exchange’ in vhost ‘/‘"></a>no exchange ‘supply_exchange’ in vhost ‘/‘</h3><div class="note danger"><p>在发布者执行发布消息的时候报交换机不存在，这样将导致你的消息丢失。</p></div>
<div class="note success"><p>一般创建交换机的代码在消费端，所以在运行发布端之前先执行消费端程序；<br><code>$channel-&gt;exchange_declare(&#39;supply_exchange&#39;, &#39;fanout&#39;, false, false, false);</code></p></div>
<h3 id="inequivalent-arg-‘type’-for-exchange-‘supply-exchange’-in-vhost-‘-‘-received-‘direct’-but-current-is-‘fanout’"><a href="#inequivalent-arg-‘type’-for-exchange-‘supply-exchange’-in-vhost-‘-‘-received-‘direct’-but-current-is-‘fanout’" class="headerlink" title="inequivalent arg ‘type’ for exchange ‘supply_exchange’ in vhost ‘/‘: received ‘direct’ but current is ‘fanout’"></a>inequivalent arg ‘type’ for exchange ‘supply_exchange’ in vhost ‘/‘: received ‘direct’ but current is ‘fanout’</h3><div class="note danger"><p>交换机一旦创建了就不能在修改type类型。</p></div>
<div class="note success"><p>如果想用不同类型的交换机就需要重新创建<br><code>$channel-&gt;exchange_declare(&#39;supply_exchange&#39;, &#39;direct&#39;, false, false, false);</code></p></div>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.cnblogs.com/wu-song/p/9923220.html" target="_blank" rel="noopener">RabbitMQ遇到的坑</a></li>
</ul>
]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitMQ学习笔记 - Hello World</title>
    <url>/posts/rabbitmq/1ad863e.html</url>
    <content><![CDATA[<div class="note danger"><p>注意：</p><ul><li>在阅读之前保证你的电脑上已经安装并运行了rabbitMQ</li><li>如果您使用其他主机，端口或凭据，则叙述过程中连接设置需要进行调整。</li><li>下面介绍的操作都是基于CentOS7上完成的。</li><li>rabbitMQ脚本安装教程：<a href="https://harlan-zh.github.io/posts/rabbitmq/a3479b5d.html" target="_blank" rel="noopener">rabbitMQ 安装教程</a></li></ul></div>
<h3 id="来自官网的简介"><a href="#来自官网的简介" class="headerlink" title="来自官网的简介"></a>来自官网的简介</h3><p>&emsp;&emsp;RabbitMQ是消息代理：它接受并转发消息。您可以将其视为邮局：将要发布的邮件放在邮箱中时，可以确保 Mail person 先生或女士最终将邮件传递给收件人。以此类推，RabbitMQ是一个邮箱，一个邮局和一个邮递员。RabbitMQ与邮局之间的主要区别在于，它不处理纸张，而是接收，存储和转发数据消息的二进制blob。<br><a id="more"></a></p>
<p>RabbitMQ消息队列基础流程：</p>
<ul>
<li><strong>生产者</strong>：发送消息的程序叫生产端。</li>
<li><strong>队&emsp;列</strong>：它的名字叫rabbit，它本质上是一个大的消息缓冲器。许多生产者可以发送进入一个队列的消息，许多消费者可以尝试从一个队列接收数据。</li>
<li><strong>消费者</strong>：对应生产者，是用来接收生产者发出的消息。<br><img src="https://s1.ax1x.com/2020/03/17/8NPJM9.png" alt="8NPJM9.png"></li>
</ul>
<h3 id="使用-php-amqplib-客户端"><a href="#使用-php-amqplib-客户端" class="headerlink" title="使用 php-amqplib 客户端"></a>使用 php-amqplib 客户端</h3><h4 id="使用composer进行依赖项管理。"><a href="#使用composer进行依赖项管理。" class="headerlink" title="使用composer进行依赖项管理。"></a>使用<a href="https://getcomposer.org/" target="_blank" rel="noopener"><code>composer</code></a>进行依赖项管理。</h4><p>官网推荐使用<code>php-amqplib</code>类库，amqplib的<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="noopener">github地址</a><br>将composer.json文件添加到您的项目中：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"require"</span> : &#123;</span><br><span class="line">        <span class="attr">"php-amqplib/php-amqplib"</span> : <span class="string">"&gt;=2.6.1"</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行<code>composer install</code>命令进行安装。<br>安装完成后项目中会产生一个vendor文件夹，里面包含的有<code>php-amqplib</code>类库</p>
<h4 id="创建生产者（产生消息）"><a href="#创建生产者（产生消息）" class="headerlink" title="创建生产者（产生消息）"></a>创建生产者（产生消息）</h4><p>在创建生产者之前先创建一个配置文件：<code>config.php</code><br><div class="note warning"><p>代码中主机，端口，用户名及密码根据自己的实际情况进行更换。</p></div><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">define(<span class="string">'HOST'</span>, <span class="string">'localhost'</span>);</span><br><span class="line">define(<span class="string">'PORT'</span>, <span class="number">5672</span>);</span><br><span class="line">define(<span class="string">'USER'</span>, <span class="string">'harlan'</span>);</span><br><span class="line">define(<span class="string">'PASS'</span>, <span class="string">'123456'</span>);</span><br><span class="line">define(<span class="string">'MQ_NAME'</span>, <span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure></p>
<p>使用上面安装的<code>php-amqplib</code>类库来创建一个生产者，命名为<code>send.php</code>：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入composer自动加载文件及config文件</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/config.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入amqp类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(HOST, PORT, USER, PASS);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建队列通道</span></span><br><span class="line">$channel-&gt;queue_declare(MQ_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">$msg_str = <span class="string">'Hello World!'</span>;</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage($msg_str);</span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">''</span>, MQ_NAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ​<span class="string">" [x] Sent "</span> . $msg_str . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后别忘了，断开连接</span></span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></p>
<p>运行<code>send.php</code>文件：<code>[root@localhost rabbitMQ]# php ./send.php</code></p>
<h4 id="创建消费者（接收消息）"><a href="#创建消费者（接收消息）" class="headerlink" title="创建消费者（接收消息）"></a>创建消费者（接收消息）</h4><p>创建一个消费者命名为：<code>receive.php</code>，消费者用来接收生产者所产生的消息。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入composer自动加载文件及config文件</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/config.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入amqp类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"></span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(HOST, PORT, USER, PASS);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line"></span><br><span class="line">$channel-&gt;queue_declare($MQ_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ​<span class="string">" [*] Waiting for messages. To exit press CTRL+C\n"</span>;</span><br><span class="line"></span><br><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">' [x] Received '</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_consume($MQ_NAME, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有消息就阻塞</span></span><br><span class="line"><span class="keyword">while</span> ($channel-&gt;is_consuming()) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行<code>receive.php</code>文件：<code>[root@localhost rabbitMQ]# php ./receive.php</code>，发现程序被阻塞等待消息（使用Ctrl-C可以退出）。这时新建一个窗口运行<code>send.php</code>就可以看到效果了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.rabbitmq.com/tutorials/tutorial-one-php.html" target="_blank" rel="noopener">rabbitMQ官网 - “Hello World”</a></li>
</ul>
]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>安装配置hexo，部署+next主题</title>
    <url>/posts/hexo/c14c7c98.html</url>
    <content><![CDATA[<p><img src="https://hsweet.gitee.io/images/hexo.png" alt="hexo"></p>
<h3 id="文章由来"><a href="#文章由来" class="headerlink" title="文章由来"></a>文章由来</h3><p>  以前没有写博客的习惯，也没写过几篇博客。之前有一次工作中找同事问一个前端问题，跑到他的办公桌前偶然的发现了这个”东西”。第一眼看上去给我的个人感觉很好，经过我对同事的仔细盘问后，在加以私下的了解，才知道这个博客是用 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a> + <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next主题</a> 搭建的。废话不多说了，Follow Me !</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><p>在安装前，先确保电脑上已经安装了 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 和 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 环境。</p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<div class="note danger"><p>官方文档上是使用npm安装的，使用 <a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">yarn</a> 安装：<a href="https://hooray.github.io/posts/15e2d21f/#more" target="_blank" rel="noopener">使用 Hexo 和 Github 快速搭建个人博客</a> 。</p></div>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>新建一个文件夹，名字随便起，比如我的叫 <code>blog</code><br>进入到新建的文件夹输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> hexo init</span><br></pre></td></tr></table></figure>
<p>初始化完成后，你会看到这样的一个文件目录结构</p>
<p><a href="https://i.loli.net/2018/09/13/5b99c23528c2e.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/13/5b99c23528c2e.png" alt="hexo-1.png"></a></p>
<h4 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new post 第一篇文章	//在_post文件夹下创建一个名为 《第一篇文章》 的文件</span><br></pre></td></tr></table></figure>
<h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> hexo generate		// 简写 hexo g</span><br></pre></td></tr></table></figure>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> hexo server		// 简写 hexo s</span><br></pre></td></tr></table></figure>
<p>以上命令会生成一个 <code>localhost:4000</code> 的连接， 打开连接会看到自己博客的首页。</p>
<h3 id="部署到线上"><a href="#部署到线上" class="headerlink" title="部署到线上"></a>部署到线上</h3><p><code>GitHub</code>，<code>Gitee</code>和<code>Coding</code>等都支持Hexo静态网站的服务，我用的是<code>Gitee</code>。</p>
<ol>
<li><p>首先到你的Gitee 上去建立一个仓库，仓库名称最好是你自己的英文名称或者自创的名称，仓库创建好后，复制仓库的地址</p>
</li>
<li><p>打开站点的 <code>_config.yml</code> 配置文件，找到最下面的 <code>deploy</code> 选项.</p>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://gitee.com/***</span>  <span class="string">//</span> <span class="string">刚刚创建的仓库连接地址</span></span><br></pre></td></tr></table></figure>
<div class="note warning"><p>注意：冒号后面一定要有一个空格</p></div>
<ol>
<li>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a> 自动部署工具。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>上传到线上<br>安装完成自动部署工具后，使用命令上传到线上</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> hexo deploy  // 简写 hexo d</span><br></pre></td></tr></table></figure>
<div class="note success"><p>第一次上传会提示你输入GitHub 或者 Gitee 的账号密码，确认后等待一会会提示你发布成功；<br>这时打开码云，找到刚刚项目分支，点击服务选择Gitee Pages，然后就可以看到线上的一个连接。<br>点击进入连接 <a href="https://hzlsourcetree.gitee.io/" target="_blank" rel="noopener">https://hsweet.gitee.io</a> 就可以看到线上的博客了。</p></div>
<p><img src="https://i.loli.net/2018/09/13/5b99dc98a90cb.png" alt="gitee.png"></p>
<div class="note danger"><p>注意：项目部署到Gitee上后每次都需要手动去更新，如果需要自动部署更新的话需购买 Gitee Pages Pro（￥99/年）</p></div>
<h3 id="主题（将持续更新…）"><a href="#主题（将持续更新…）" class="headerlink" title="主题（将持续更新…）"></a>主题（将持续更新…）</h3><h4 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<div class="note info"><p>我安装的是 <code>6.0.x</code> 的 NexT ，但在 NexT 官网上提供的还是 <code>5.1.x</code> 的安装命令和文档，因为 <code>6.0.x</code> 和 <code>5.1.x</code> 的配置有所不同，建议第一次练习搭建还是使用 <code>5.1.x</code> ，熟悉配置文档后，再用 <code>6.0.x</code> 。</p></div>
<p>修改 <code>_config.yml</code> 文件里 theme 配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>虽然我安装的是 <code>6.0.x</code> ，但大部分还是可以根据 <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT</a> 主题配置 文档来修改，以下会介绍一些文档中没有提及的设置。</p>
<div class="note default"><p>区分两个配置文件 :</p><ul><li><code>站点配置文件</code> <code style="color:#c33e3f;">_config.yml</code></li><li><code>主题配置文件</code> <code style="color:#c33e3f;">themes/next/_config.yml</code></li></ul></div>
<h5 id="设置网站语言"><a href="#设置网站语言" class="headerlink" title="设置网站语言"></a>设置网站语言</h5><p>打开 <code>站点配置</code> 找到 <code>language</code> 修改</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>
<h5 id="开启导航"><a href="#开启导航" class="headerlink" title="开启导航"></a>开启导航</h5><p>打开 <code>主题配置</code> 找到 <code>menu</code> ，将需要开启的导航前面的 <code>#</code> 删掉</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span>					<span class="string">//</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span>				<span class="string">//</span> <span class="string">关于我</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span>					<span class="string">//</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span>			<span class="string">//</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span>			<span class="string">//</span> <span class="string">归档</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar			// 日程表</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap			// 站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">/404.html</span> <span class="string">||</span> <span class="string">heartbeat</span>			<span class="string">//</span> <span class="number">404</span><span class="string">公益</span></span><br></pre></td></tr></table></figure>
<p>这个时候会发现网站上已经能看到导航了，但点击却提示找不到页面。</p>
<p>这时需要去新建对应的页面，比如新建 <code>标签</code> 页：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page "tags"</span><br></pre></td></tr></table></figure>
<p>新建好后会在 <code>source/tags/index.md</code> 看到刚新建的文件，在文件随便增加一句话重新编译生成试试。</p>
<p>更多配置请参考文档 : <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题官方文档</a></p>
<h4 id="2020-04-05-主题优化"><a href="#2020-04-05-主题优化" class="headerlink" title="2020-04-05 主题优化"></a>2020-04-05 主题优化</h4><h5 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h5><p>点击<a href="https://github.blog/2008-12-19-github-ribbons/" target="_blank" rel="noopener">这里</a>或者<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码。<br>粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面)，并把<code>href</code>改为你的github地址<br><img src="https://i.loli.net/2020/04/06/vzpx3PZWYgHfe1k.png" alt="Snipaste_2020-04-06_00-00-50_s.png"></p>
<h5 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h5><p>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code> ，在末尾添加如下css样式:<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="修改文章底部的带-号的标签"><a href="#修改文章底部的带-号的标签" class="headerlink" title="修改文章底部的带#号的标签"></a>修改文章底部的带#号的标签</h5><p>修改模板 <code>\themes\next\layout\_macro\post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<h5 id="使用gulp对博文进行压缩"><a href="#使用gulp对博文进行压缩" class="headerlink" title="使用gulp对博文进行压缩"></a>使用gulp对博文进行压缩</h5><ol>
<li><p>在站点的根目录下执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install gulp -g</span><br><span class="line"><span class="meta">$</span> npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在站点的根目录下新建 <code>gulpfile.js</code> 文件，将下面代码复制到新建的文件里去：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在打包的时候是执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 <code>public</code> 目录中的静态资源文件进行压缩。</p>
</li>
</ol>
<h5 id="修改代码块自定义样式"><a href="#修改代码块自定义样式" class="headerlink" title="修改代码块自定义样式"></a>修改代码块自定义样式</h5><p>打开 <code>\themes\next\source\css\_custom\custom.styl</code>，向里面加入：(颜色可以自己定义)<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7600</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">code</span>, <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="设置文章，菜单栏，评论区，分页，站点概况为透明"><a href="#设置文章，菜单栏，评论区，分页，站点概况为透明" class="headerlink" title="设置文章，菜单栏，评论区，分页，站点概况为透明"></a>设置文章，菜单栏，评论区，分页，站点概况为透明</h5><p>打开 <code>\themes\next\source\css\_custom\custom.styl</code>，向里面加入：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.6</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pagination</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.6</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.6</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.6</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comments</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.6</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.6</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="设置3D雪花动画"><a href="#设置3D雪花动画" class="headerlink" title="设置3D雪花动画"></a>设置3D雪花动画</h5><ol>
<li>在 <code>\themes\next\source\js\src\</code> 新建一个<code>newSnow.js</code>文件，将<a href="https://github.com/Harlan-zh/harlan-zh.github.io/blob/master/js/src/newSnow.js" target="_blank" rel="noopener">这里</a>的代码复制到刚新建的那个文件里</li>
<li><p>打开 <code>\themes\next\layout\_layout.swig</code> 找到<code>&lt;/body&gt;</code>闭合标签的<strong>上面</strong>增加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.showNewSnow %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/newSnow.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"><span class="selector-class">.snow-container</span>&#123;<span class="attribute">position</span>:fixed;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">pointer-events</span>:none;<span class="attribute">z-index</span>:<span class="number">100001</span>&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"snow-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>_config.yml</code>最后面新增以下配置：（注意：是主题配置文件）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">showNewSnow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>效果图：<br><img src="https://i.loli.net/2020/04/06/my3Q2Zr4tDYIEqF.png" alt="Snipaste_2020-04-06_01-00-10_s.png"></p>
<h5 id="更换博客背景图片"><a href="#更换博客背景图片" class="headerlink" title="更换博客背景图片"></a>更换博客背景图片</h5><p>打开 <code>\themes\next\source\css\_custom\custom.styl</code>，向里面加入：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"/images/snow_bg.jpg"</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>每次新建，修改博文或修改配置的时候只需要以下四个命令就ok了。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> hexo generate		// 编译生成静态文件 简写: hexo g</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo server		// 本地预览 简写: hexo s</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo deploy		// 部署到git服务器 简写：hexo d</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo clean		// 清除编译生成静态文件</span><br></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo文档</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题文档</a></li>
<li><a href="https://hooray.github.io/posts/15e2d21f/" target="_blank" rel="noopener">搭建hexo + next主题博客教程</a></li>
<li><a href="https://www.wolfdan.cn/Hexo-Next-Gemini%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E5%8C%96%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E6%9B%B4%E6%94%B9/" target="_blank" rel="noopener">Hexo-Next-Gemini主题透明化以及背景图片的更改和获取</a></li>
<li><a href="https://www.cnblogs.com/zhangxiaochn/p/Hexo_Theme_Next.html" target="_blank" rel="noopener">Hexo Next 主题启用及相关设置</a></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>解决ERROR 2006 (HY000): MySQL server has gone away</title>
    <url>/posts/mysql/e5995b09.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;今天在做地址4级联动的时候，由于一次性全部取出数据导致报：<code>SQLSTATE[HY000]: General error: 2006 MySQL server has gone away</code>。于是在网上寻找相关的解决方案，发现是因为超过了mysql默认的数据包。<br><a id="more"></a></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>登录mysql查询设置最大的数据包值<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global variables like 'max_allowed_packet';</span><br><span class="line">+<span class="comment">--------------------+---------+</span></span><br><span class="line">| Variable_name      | Value   |</span><br><span class="line">+<span class="comment">--------------------+---------+</span></span><br><span class="line">| max_allowed_packet | 1048576 |</span><br><span class="line">+<span class="comment">--------------------+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上限是1M，mysql的默认配置。</p>
<ol start="2">
<li>修改配置，设置为16M<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> max_allowed_packet = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<div class="note danger"><p>注意：以上命令修改值针对当前有效，mysql重启后还会变成默认值1M。</p></div>
<ol start="3">
<li>永久有效，修改配置文件 <code>my.ini</code><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">max_allowed_packet</span> = <span class="number">16</span>M</span><br></pre></td></tr></table></figure>
</li>
</ol>
<div class="note warning"><p>注意：修改完<code>ini</code>配置千万不要忘记重启哦，或者从新加载配置文件！</p></div>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.hankcs.com/appos/database/error-2006-hy000-server-has-gone-away-mysql.html" target="_blank" rel="noopener">解决ERROR 2006 (HY000): MySQL server has gone away</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
